name: Publish MongoDB.Sync NuGet Package

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    # Check out the code
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch the entire history for versioning

    # Ensure the repository is fully cloned
    - name: Verify Git History
      shell: pwsh
      run: |
        if ((git rev-parse --is-shallow-repository) -eq $true) {
          git fetch --unshallow
        } else {
          Write-Host "Repository is already fully cloned."
        }

    # Set up .NET environment
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Install GitVersion
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.0
      with:
        versionSpec: '5.x'

    # Generate version information
    - name: Generate Version
      id: gitversion
      run: dotnet-gitversion /output json /showvariable SemVer
      shell: pwsh

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore Common/MongoDB.Sync/MongoDB.Sync.csproj

    # Build the project
    - name: Build Project
      run: dotnet build Common/MongoDB.Sync/MongoDB.Sync.csproj --configuration Release

    # Package the NuGet package with the version
    - name: Pack NuGet Package
      run: |
        dotnet pack Common/MongoDB.Sync/MongoDB.Sync.csproj --configuration Release --output Common/MongoDB.Sync/bin/Release /p:PackageVersion=${{ steps.gitversion.outputs.SemVer }}

    # Locate the .nupkg file
    - name: Locate Package
      id: locate-package
      shell: pwsh
      run: |
        $files = Get-ChildItem -Path "Common/MongoDB.Sync/bin/Release" -Filter *.nupkg -Recurse
        if ($files.Count -eq 0) {
          Write-Error "No .nupkg files found in Common/MongoDB.Sync/bin/Release"
          exit 1
        }
        $packagePath = $files[0].FullName
        Write-Host "Found package at $packagePath"
        echo "PACKAGE_PATH=$packagePath" | Out-File -FilePath $env:GITHUB_ENV -Append

    # Publish the NuGet package
    - name: Publish NuGet Package
      run: |
        dotnet nuget push "${{ env.PACKAGE_PATH }}" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
      shell: pwsh
